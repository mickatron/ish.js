{"version":3,"sources":["ish.lite.js","js/ish.core.js","js/ish.events.js"],"names":[],"mappingsvozNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ish.lite.js","sourcesContent":["\r\nvar ish = function(document, window, $) {\r\n  'use strict';\r\n  /* Lib core\r\n  ---------------------------------------*/\r\n  //=include /js/ish.core.js\r\n  //=include /js/ish.events.js\r\n\r\n  return $;\r\n\r\n}(document, this);","/**\r\n * @mixin ishObject\r\n * @description\r\n * When you invoke the `ish('selector')` method `ishObject` members are inherited through Prototype Delegation to the returned collection.\r\n * The result is just like a jQuery Object, there is utility methods, a length, context and selector property.\r\n * \r\n * @example\r\n * // Cache an ishObject collection\r\n * var collection = ish('selector');\r\n * \r\n * // Call an ishObject method\r\n * ish('selector').attr('attributeName');\r\n * \r\n * // There is a length property\r\n * ish('selector').length; \r\n * \r\n * // and also a selector property which refers to the first parameter passed into ish();\r\n * ish('selector').selector;\r\n *\r\n * // You can call native methods on collection items just like you would in jQuery\r\n * ish('selector')[0].style.display = 'block';\r\n * \r\n */\r\nvar ishObject = {},\r\n\tforEach = 'forEach',\r\n\textend = 'extend',\r\n\t_window = window,\r\n\t_doc = document,\r\n\tdummy = document.createElement('i');\r\n\r\n// Node and ishObject selector context supported. \r\n\r\n/**\r\n * Simple selector engine based on <code>querySelectorAll</code>. The usage and result is similar to <code>jQuery(selector)</code>.\r\n * @name  ish\r\n * @augments ishObject\r\n * @function\r\n * @memberof ish\r\n * @param   {String|Node}   selector   A CSS Selector compatible with document.querySelectorAll or a single `Node`.\r\n * @param   {ishObject|Array|NodeList} context  Used to give a selector a search context.\r\n * @param   {String} forceSelector    Set the ish('selector').selector paramter forcibly.\r\n * @return  {ishObject}                A list of nodes with inherited library methods.\r\n * @example\r\n * ish('selector');\r\n * //filter the collection with some context of type Node || NodeList\r\n * ish('selector', Node);\r\n * ish('selector', NodeList);\r\n */\r\n$ = function(selector, context, forceSelector) {\r\n\tcontext = context || document;\r\n\r\n\tvar found;\r\n\tif (isNode(selector) || selector === window || selector === document) {\r\n\t\tfound = [selector];\r\n\t\tselector = forceSelector || selector;\r\n\t} else {\r\n\t\t// if context is an ishObject\r\n\t\tif (context.length) {\r\n\t\t\tfound = [];\r\n\t\t\tvar nodesFound;\r\n\t\t\tfor (var i = 0; i < context.length; i++) {\r\n\t\t\t\tnodesFound = context[i].querySelectorAll(selector || '☺');\r\n\t\t\t\t// might be able to improve this....\r\n\t\t\t\t// https://blog.jscrambler.com/12-extremely-useful-hacks-for-javascript\r\n\t\t\t\tfor (var el = 0; el < nodesFound.length; el++) {\r\n\t\t\t\t\tfound.push(nodesFound[el]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// querySelectorAll requires a string with a length\r\n\t\t\t// otherwise it throws an exception\r\n\t\t\tfound = context.querySelectorAll(selector || '☺');\r\n\t\t}\r\n\t}\r\n\tvar length = found.length;\r\n\tvar obj = Object.create(ishObject);\r\n\r\n\tfor (var n = 0; n < length; n++) {\r\n\t\tobj[n] = found[n] || found;\r\n\t}\r\n\r\n\t/**\r\n\t * The number of items found in the collection.\r\n\t * @memberOf ishObject\r\n\t * @name  length\r\n\t */\r\n\tobj.length = length;\r\n\t/**\r\n\t * The selector string as given when calling ish(selector, context, forceSelector). This value can be overridden if using the ish() forceSelector parameter.\r\n\t * @memberOf ishObject\r\n\t * @name  selector\r\n\t */\r\n\r\n\tobj.selector = selector;\r\n\t/**\r\n\t * The context as given when calling ish(selector, context).\r\n\t * @memberOf ishObject\r\n\t * @name  context\r\n\t */\r\n\tobj.context = context;\r\n\treturn obj;\r\n};\r\n\r\n\r\n//Returns true if it is a DOM node\r\nfunction isNode(o) {\r\n\treturn (\r\n\t\ttypeof Node === \"object\" ? o instanceof Node :\r\n\t\to && typeof o === \"object\" && typeof o.nodeType === \"number\" && typeof o.nodeName === \"string\"\r\n\t);\r\n}\r\n\r\n/**\r\n * Returns the item at the specified index in the `ishObject`.\r\n * @name  ishObject.nth\r\n * @function\r\n * @param  {Number} int    The index of the item in the `ishObject`.\r\n * @example\r\n * ish('selector').nth(0); //gets the first node\r\n */\r\n\r\nishObject.nth = function(int) {\r\n\treturn $(this[int], null, this.selector);\r\n};\r\n\r\n\r\n\r\n/**\r\n * Iterates an `ishObject` returning each `Node` in an individual `ishObject`, along with its index \r\n * in the original collection. This method will iterate every item in the collection and cannot be broken.\r\n * @name  ishObject.forEach\r\n * @function\r\n * @param  {Function} fn    The callback function which will be called with each iteration\r\n * @param  {Object}   scope The scope in which the callback function will be called. \r\n * @return {ishObject}        Returns the `ishObject` which called it. Method is chainable. \r\n * @example\r\n * ish('selector', function( $item, index ) {\r\n *     //iterates the collections Dom Nodes, cannot be broken out of.    \r\n * });\r\n */\r\nishObject[forEach] = function(fn, scope) {\r\n\tscope = scope || this;\r\n\tvar i = 0,\r\n\t\ts,\r\n\t\tlen = this.length;\r\n\tfor (i; i < len; i++) {\r\n\t\ts = $(this[i], null, this.selector);\r\n\t\tfn.call(scope, s, i);\r\n\t}\r\n\treturn this;\r\n};\r\n/**\r\n * Gets the index of a specific `Node` in an `ishObject`\r\n * @name  ishObject.indexOf\r\n * @function\r\n * @param  {Node} needle    The `Node` to find in the `ishObject`.\r\n * @return {Number}         Index of the `Node` in the `ishObject`. Returns -1 if not found.\r\n * @example\r\n * ish('selector').indexOf(Node);\r\n */\r\nishObject.indexOf = function(needle) {\r\n\tvar i = 0,\r\n\t\tlen = this.length;\r\n\r\n\tfor (i; i <= len; i++) {\r\n\t\tvar item = this[i];\r\n\t\tif (item === needle) {\r\n\t\t\treturn i;\r\n\t\t} else if (!item) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t}\r\n\t//return this;\r\n};\r\n/**\r\n * Gets an attributes value for the first element in the `ishObject`. If the second argument is supplied the \r\n * method sets an attribute and its value on all `Node`'s in the given `ishObject`.\r\n * @name  ishObject.attr\r\n * @function\r\n * @param  {String} name        A valid CSS attribute selector.\r\n * @param  {String} value       The attirbute value to be set.\r\n * @return {ishObject|String}     If setting an attribute the method returns the `ishObject` which called it \r\n * and is chainable. If getting an attribute value the method will return the value found or undefined if \r\n * it's not found.\r\n * @example\r\n * ish('selector').attr('attribute-name'); //get an attribute value\r\n * ish('selector').attr('attribute-name','attribute-value'); //set an attribute value\r\n */\r\nishObject.attr = function(name, value) {\r\n\tvar returnVal;\r\n\tif (typeof value === \"string\") {\r\n\t\tthis[forEach](function(el) {\r\n\t\t\tel[0].setAttribute(name, value);\r\n\t\t});\r\n\t\treturnVal = this;\r\n\t} else if (this[0]) {\r\n\t\treturnVal = this[0].getAttribute(name);\r\n\t}\r\n\treturn returnVal;\r\n};\r\n\r\n\r\n/**\r\n * Accepts two `Object`s, merges the second parameter into the first recursively and returns a new `Object`. \r\n * containing the results of the merge.\r\n * @name  ish#extends\r\n * @function\r\n * @param  {Object} object1 An `Object` that will have values of object2 recursively merged.\r\n * @param  {Object} obectj2 An `Object` to merge into object1.\r\n * @return {Object}         A merged `Object`.\r\n * @example\r\n * var obj1 = {a:'a',b:{ba:'ba',bb:'bb',bc:{bca:'bca'}},c:[1,2,3]};\r\n * var obj2 = {d:'d',b:{ba:'ba-change',bc:{bcb:'added'}},c:[4,5,6]};\r\n * ish.extend(obj1,obj2);\r\n */\r\n$[extend] = function() {\r\n\tvar args = arguments;\r\n\tvar newObj = arguments[0];\r\n\tvar length = arguments.length;\r\n\r\n\tfor (var i = 1; i < length; i++) {\r\n\t\tfor (var p in args[i]) {\r\n\t\t\t// Property in destination object set; update its value.\r\n\t\t\tif (args[i][p] === null || args[i][p] === undefined) {\r\n\t\t\t\tcontinue;\r\n\t\t\t} else if (args[i][p].constructor === Object) {\r\n\t\t\t\tnewObj[p] = $[extend](newObj[p] || {}, args[i][p]);\r\n\t\t\t} else {\r\n\t\t\t\tnewObj[p] = args[i][p];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn newObj;\r\n};\r\n\r\n\r\n\r\n/**\r\n * Returns the left and top offset in pixels for the first element in the `ishObject`. \r\n * @name  ishObject.offset\r\n * @function\r\n * @return {Object}         An `Object` with values for left and top offsets in pixel values.\r\n * @example\r\n * ish('selector').offset();\r\n */\r\nishObject.offset = function() {\r\n\tvar ol = 0;\r\n\tvar ot = 0;\r\n\tif (this[0].offsetParent) {\r\n\r\n\t\tol = this[0].offsetLeft;\r\n\t\tot = this[0].offsetTop;\r\n\r\n\t}\r\n\treturn {\r\n\t\tleft: ol,\r\n\t\ttop: ot\r\n\t};\r\n};\r\n\r\n\r\n/**\r\n * Gets the width or height the first element in the supplied `ishObject`.\r\n * @name  ishObject.dimension\r\n * @function\r\n * @param  {String} type          'width' or 'height'.\r\n * @param  {Boolean} margins      Include margins in the return result.\r\n * @param  {Boolean} clientHeight Exclude the horizontal scrollbars height from the result.\r\n * @return {Integer}              The height of the element.\r\n * @example\r\n * ish('selector').width();\r\n */\r\n\r\nishObject.dimension = function(type, margins, clientHeight) {\r\n\tvar disp;\r\n\tif (this.selector !== (window || document)) {\r\n\t\tdisp = this[0].style.display;\r\n\t\tif (disp === 'none') this[0].style.display = 'block';\r\n\t}\r\n\tvar height = 0;\r\n\tvar mt = 0;\r\n\tvar mb = 0;\r\n\tif (margins) {\r\n\t\tmt = type === 'height' ? this.css('marginTop') : this.css('marginLeft');\r\n\t\tmb = type === 'height' ? this.css('marginBottom') : this.css('marginRight');\r\n\t\theight = mt + mb;\r\n\t}\r\n\r\n\tif (this[0] === window) {\r\n\t\theight += type === 'height' ? this[0].outerHeight : this[0].outerWidth;\r\n\t} else if (clientHeight) {\r\n\t\theight += type === 'height' ? this[0].clientHeight : this[0].clientWidth;\r\n\t\t//this[0].style.display = '';\r\n\t} else {\r\n\t\theight += type === 'height' ? this[0].offsetHeight : this[0].offsetWidth;\r\n\r\n\t}\r\n\tif (this.selector !== (window || document))\r\n\t\tif (disp === 'none') this[0].style.display = 'none';\r\n\treturn height;\r\n};\r\n\r\n\r\n/**\r\n * Gets the CSS value of the first element in the supplied `ishObject`. Or sets the CSS value on all items in an `ishObject`.\r\n * @name  ishObject.css\r\n * @function\r\n * @param  {String} prop   The name of the CSS property in camelCase. eg. 'margin-left' would be passed as 'marginLeft'.  \r\n * @param  {String} value   Exclude the horizontal scrollbars height from the result.\r\n * @return {ishObject}       Returns the `ishObject` which called it. Method is chainable. \r\n * @example\r\n * ish('selector').css();\r\n */\r\nishObject.css = function(prop, value) {\r\n\tif(typeof prop === 'object') {\r\n\t\tfor(var each in prop) {\r\n\t\t\tthis.css(each, prop[each]);\r\n\t\t}\r\n\t} else if (!value) {\r\n\t\t//get the style\r\n\t\tvar typeStr = prop.slice(0, 6) + '-' + prop.slice(6).toLowerCase();\r\n\t\treturn parseInt(this[0].style[prop] || window.getComputedStyle(this[0]).getPropertyValue(typeStr));\r\n\t} else {\r\n\t\t// set the style\r\n\t\tthis[forEach](function($el) {\r\n\t\t\t$el[0].style[prop] = value;\r\n\t\t});\r\n\t}\r\n\treturn this;\r\n};","//=require ish.core.js\r\n/**\r\n * Attach handlers to the Node/s in the given ishObject. This method is just a wrapper for 'addeventListener' so any valid Javascript event can be used. \r\n * It's inclusion in the library is intended to save you writing loops to cover multiple event targets when hooking events.\r\n * @param  {String}   event     The type of event you're adding to the Node/s\r\n * @param  {Function} fn        A callback to be fired when the event is triggered.\r\n * @param  {String}   delegate  A valid CSS selector to delegate the event to.\r\n * @return {ishObject}            Method is chainable, returns the ish Object which called the method. \r\n * @example\r\n * var fn = function(event) {\r\n *     //mousedown event\r\n * };\r\n * ish('selector').on('mousedown', fn);\r\n */\r\n\r\nishObject.on = function(event, fn, delegate) {\r\n\r\n\tif (delegate) {\r\n\t\tthis[forEach](function(el) {\r\n\t\t\tvar node = el[0];\r\n\t\t\tvar matches = node.mozMatchesSelector || node.webkitMatchesSelector || node.oMatchesSelector || node.matchesSelector || (function(delegate) {\r\n\r\n\t\t\t\tvar target = node,\r\n\t\t\t\t\telements = $(delegate),\r\n\t\t\t\t\tmatch = false;\r\n\t\t\t\telements[forEach](function($el) {\r\n\t\t\t\t\tif ($el[0] === target) match = true;\r\n\t\t\t\t});\r\n\t\t\t\treturn match;\r\n\t\t\t});\r\n\t\t\t//store an array on the node with the delgate function data.\r\n\t\t\t// we'll call on this data in the undelgate methods\r\n\t\t\tnode.delegates = node.delegates || [];\r\n\t\t\tvar temp = {\r\n\t\t\t\tf: fn,\r\n\t\t\t\te: function(event) {\r\n\t\t\t\t\tif (matches.call(event.target, delegate)) {\r\n\t\t\t\t\t\tfn(event);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tnode.delegates.push(temp);\r\n\t\t\tnode.addEventListener(event, temp.e);\r\n\t\t});\r\n\t} else {\r\n\t\tthis[forEach](function(el) {\r\n\t\t\tel[0].addEventListener(event, fn, false);\r\n\t\t}, this);\r\n\t}\r\n\treturn this;\r\n};\r\n\r\n\r\n/**\r\n * Dettach handlers to the Node/s in the given ishObject. This method is just a wrapper for 'removeEventListener' so any valid Javascript event can be used. \r\n * Its inclusion in the library is intended to save you writing loops to cover multiple event targets when hooking events.\r\n * @param  {string} event The type of event you're adding to the Node/s\r\n * @param  {function} fn The Node to find in the ish Object.\r\n * @return {ishObject}         Method is chainable, returns the ish Object which called the method. \r\n * @example\r\n * var fn = function(event) {\r\n *     //mousedown event\r\n * };\r\n * ish('selector').on('mousedown', mousedownHandler); //on\r\n * ish('selector').off('mousedown', fn); //off\r\n */\r\nishObject.off = function(event, fn) {\r\n\r\n\tthis[forEach](function(el) {\r\n\t\t// remove listeners from the element\r\n\t\tel[0].removeEventListener(event, fn, false);\r\n\t\t// remove any delegate listeners\r\n\t\tvar delegates = el[0].delegates;\r\n\t\t// if there's delegates loop each of them\r\n\t\tif (delegates)\r\n\t\t\tdelegates[forEach](function(evtfn, i) {\r\n\t\t\t\t// check for matches\r\n\t\t\t\tif (evtfn.f === fn) {\r\n\t\t\t\t\tel.off(event, evtfn.e);\r\n\t\t\t\t\tel[0].delegates.splice(i - 1, i);\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\t});\r\n\r\n\treturn this;\r\n};\r\n\r\n\r\n/**\r\n * Triggers an event.\r\n * @param  {string} type The type of event to trigger.\r\n * @param  {object} data Any \r\n * @return {ishObject}         Method is chainable, returns the ish Object which called the method. \r\n * @example\r\n * var fn = function(event) {\r\n *     //mousedown event\r\n * };\r\n * ish('selector').on('mousedown', fn); //on\r\n * ish('selector').trigger('mousedown'); //fires mousedown\r\n */\r\nishObject.trigger = function(type, data) {\r\n\tthis[forEach](function(el) {\r\n\t\t// construct an HTML event. This could have\r\n\t\t// been a real custom event\r\n\t\tvar event = document.createEvent('HTMLEvents');\r\n\t\tevent.initEvent(type, true, true);\r\n\t\tevent.data = data || {};\r\n\t\tevent.eventName = type;\r\n\t\t//event.target = el;\r\n\t\tel[0].dispatchEvent(event);\r\n\r\n\r\n\t\t//el[trigger](event);\r\n\t});\r\n\treturn this;\r\n};"],"sourceRoot":"/source/"}